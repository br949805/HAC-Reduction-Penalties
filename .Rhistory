dataNoNa$WkEnd <- 0
}
}
warnings()
wkEnd <- c("Saturday","Sunday")
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% wkEnd) {
dataNoNa$WkEnd <- 1
} else {
dataNoNa$WkEnd <- 0
}
}
View(dataNoNa)
agg_wkEnd <- aggregate(steps ~ wkEnd, data=dataNoNa, FUN=mean, na.rm=T)
View(dataNoNa)
table(dataNoNa$wkEnd)
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Saturday","Sunday")) {
dataNoNa$WkEnd <- 1
} else {
dataNoNa$WkEnd <- 0
}
}
table(dataNoNa$wkEnd)
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c(6,7)) {
dataNoNa$WkEnd <- 1
} else {
dataNoNa$WkEnd <- 0
}
}
table(dataNoNa$wkEnd)
View(dataNoNa)
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c(1,2)) {
dataNoNa$WkEnd <- 1
} else {
dataNoNa$WkEnd <- 0
}
}
View(dataNoNa)
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Monday",2)) {
dataNoNa$WkEnd <- 1
} else {
dataNoNa$WkEnd <- 0
}
}
View(dataNoNa)
library(lattice)
dataNoNa$weekday[i] %in% c("Monday",2)
View(dataNoNa)
dataNoNa$weekday[i] %in% c(Monday,2)
dataNoNa$weekday[i] %in% c('Monday',2)
dataNoNa$weekday[i] %in% c('Monday',1)
dataNoNa$weekday[i] %in% c('Monday',1,2,3,4,5,6)
dataNoNa$weekday[i] %in% c('Monday',1,2,3,4,5,6,7)
dataNoNa$weekday[i] %in% dataNoNa$weekday[i]
dataNoNa$weekday[1] %in% dataNoNa$weekday[1]
dataNoNa$weekday[1] == "Monday"
dataNoNa$weekday[1] %in% c("Monday")
dataNoNa$weekday[1] %in% c("Monday",2)
(dataNoNa$weekday[1] %in% c("Saturday","Sunday"))
(dataNoNa$weekday[1200] %in% c("Saturday","Sunday"))
(dataNoNa$weekday[1500] %in% c("Saturday","Sunday"))
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Saturday","Sunday")) {
dataNoNa$WkEnd <- 1
} else {
dataNoNa$WkEnd <- 0
}
}
View(dataNoNa)
table(dataNoNa$WkEnd)
summary(dataNoNa$weekday)
summary(dataNoNa$wkEnd)
summary(dataNoNa$WkEnd)
(dataNoNa$weekday[i] %in% c("Saturday","Sunday"))
(dataNoNa$weekday[1500] %in% c("Saturday","Sunday"))
dataNoNa$WkEnd[1500,]
dataNoNa$WkEnd[1500]
dataNoNa$wkEnd[1500]
dataNoNa$WkEnd[1500]
(dataNoNa$weekday[1500] %in% c("Saturday","Sunday"))
dataNoNa$WkEnd[1500]
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Saturday","Sunday")) {
dataNoNa$wkEnd <- 1
} else {
dataNoNa$wkEnd <- 0
}
}
View(dataNoNa)
dataNoNa$WkEnd[1500]
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Saturday","Sunday")) {
dataNoNa$wkEnd <- 1
} else {
}
}
View(dataNoNa)
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Saturday","Sunday")) {
dataNoNa$wkEnd <- 1
} else {
}
}
View(dataNoNa)
library(lattice)
library(RCurl)
x <- getURL("https://github.com/br949805/RepData_PeerAssessment1/raw/master/activity.csv",
ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=x)
rm(x)
agg <- aggregate(steps ~ date, data=data, FUN=sum, na.rm=T)
hist(agg$steps, main="Distribution of Steps Per Day", xlab= "Steps Per Day")
agg_interval <- aggregate(steps ~ interval, data=data, FUN=mean, na.rm=T)
plot(x=agg_interval$interval,y=agg_interval$steps, type="l", main="Average Number of Steps Per Interval", xlab="Interval", ylab="Average Number of Steps", col="blue")
dataNoNa <- data
for(i in 1:length(dataNoNa$steps))
{
if(is.na(dataNoNa$steps[i])) {
dataNoNa$steps[i] <- agg_interval$steps[dataNoNa$interval[i] == agg_interval$interval]
}
}
agg_NoNa <- aggregate(steps ~ date, data=dataNoNa, FUN=sum, na.rm=T)
hist(agg_NoNa$steps, main="Distribution of Steps Per Day", sub="Imputation Applied", xlab= "Steps Per Day")
dataNoNa$weekday <- sapply(as.Date(dataNoNa$date), weekdays)
dataNoNa$weekday <- as.factor(dataNoNa$weekday)
View(dataNoNa)
(dataNoNa$weekday[1] %in% c("Saturday","Sunday"))
i=1
(dataNoNa$weekday[i] %in% c("Saturday","Sunday"))
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] %in% c("Saturday","Sunday")) {
dataNoNa$wkEnd <- 1
} else {
}
}
View(dataNoNa)
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] !%in% c("Saturday","Sunday")) {
dataNoNa$wkEnd <- 1
} else {
}
}
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] !%in% c("Saturday","Sunday")) {
dataNoNa$wkEnd <- 1
}
}
dataNoNa$weekday[i] !%in% wkEndDays
dataNoNa$weekday[i] ! %in% wkEndDays
wkEndDays <- c("Saturday","Sunday")
for(i in 1:length(dataNoNa$weekday))
{
if(!(dataNoNa$weekday[i] %in% wkEndDays)) {
dataNoNa$wkEnd <- 1
}
}
View(dataNoNa)
dataNoNa$wkEnd[1500]
wkEndDays <- c("Saturday","Sunday")
for(i in 1:length(dataNoNa$weekday))
{
if(!(dataNoNa$weekday[i] %in% wkEndDays)) {
dataNoNa$wkEnd <- 1
} else {
dataNoNa$wkEnd <- 0
}
}
View(dataNoNa)
dataNoNa$wkEnd[1500]
plot(~ dataNoNa,y=agg_interval$steps, type="l", main="Average Number of Steps Per Interval", xlab="Interval", ylab="Average Number of Steps", col="blue")
wkEndDays <- c("Saturday","Sunday")
for(i in 1:length(dataNoNa$weekday))
{
if(!(dataNoNa$weekday[i] %in% wkEndDays)) {
dataNoNa$wkEnd <- "Yes"
} else {
dataNoNa$wkEnd <- "No"
}
}
View(dataNoNa)
dataNoNa$wkEnd[1500]
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] = "Saturday") {
dataNoNa$wkEnd <- "Yes"
} else {
dataNoNa$wkEnd <- "No"
}
}
for(i in 1:length(dataNoNa$weekday))
{
if(dataNoNa$weekday[i] == "Saturday") {
dataNoNa$wkEnd <- "Yes"
} else {
dataNoNa$wkEnd <- "No"
}
}
View(dataNoNa)
summary(dataNoNa$wkEnd)
table(dataNoNa$wkEnd)
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday == wkEndDays,1,0)
View(dataNoNa)
table(dataNoNa$wkEnd)
wkEndDays <- c("Saturday")
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday == wkEndDays,1,0)
table(dataNoNa$wkEnd)
wkEndDays <- c("Sunday")
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday == wkEndDays,1,0)
table(dataNoNa$wkEnd)
wkEndDays <- c("Sunday","Saturday")
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday %in% wkEndDays,1,0)
table(dataNoNa$wkEnd)
agg_wkEnd <- aggregate(steps ~ wkEnd, data=dataNoNa, FUN=mean, na.rm=T)
View(agg_wkEnd)
agg_wkEnd <- aggregate(steps ~ interval, data=dataNoNa, FUN=mean, na.rm=T,drop=F)
View(agg_wkEnd)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==1), FUN=mean, na.rm=T)
View(agg_wkEnd)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==0), FUN=mean, na.rm=T)
View(agg_wkEnd)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==1), FUN=mean, na.rm=T)
View(agg_wkEnd)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==0), FUN=mean, na.rm=T)
View(dataNoNa)
View(agg_wkEnd)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==1), FUN=mean, na.rm=T)
View(agg_wkEnd)
View(agg_wkdays)
View(agg_wkEnd)
dataNoNa$wkEnd <- as.factor(dataNoNa$wkEnd)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==0), FUN=mean, na.rm=T)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==1), FUN=mean, na.rm=T)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==0), FUN=mean, na.rm=T)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd==1), FUN=mean, na.rm=T)
xyplot(~ steps | wkEnd, data=dataNoNa)
xyplot(~ steps | wkEnd, data=dataNoNa layout=c(1,2))
xyplot(~ steps | wkEnd, data=dataNoNa, layout=c(1,2))
xyplot(~ dataNoNa$steps | dataNoNa$wkEnd, data=dataNoNa, layout=c(1,2))
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, layout=c(1,2))
dataNoNa$weekday <- sapply(as.Date(dataNoNa$date), weekdays)
dataNoNa$weekday <- as.factor(dataNoNa$weekday)
wkEndDays <- c("Sunday","Saturday")
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday %in% wkEndDays,"WeekEnd","WeekDays")
dataNoNa$wkEnd <- as.factor(dataNoNa$wkEnd)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="WeekDays"), FUN=mean, na.rm=T)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="WeekEnd"), FUN=mean, na.rm=T)
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, layout=c(1,2))
wkEndDays <- c("Sunday","Saturday")
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday %in% wkEndDays,"Weekend","Weekdays")
dataNoNa$wkEnd <- as.factor(dataNoNa$wkEnd)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="Weekdays"), FUN=mean, na.rm=T)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="Weekend"), FUN=mean, na.rm=T)
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, layout=c(1,2))
wkEndDays <- c("Sunday","Saturday")
dataNoNa$wkEnd <- ifelse(dataNoNa$weekday %in% wkEndDays,"Weekend","Weekday")
dataNoNa$wkEnd <- as.factor(dataNoNa$wkEnd)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="Weekday"), FUN=mean, na.rm=T)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="Weekend"), FUN=mean, na.rm=T)
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, layout=c(1,2))
agg_wkdays <- aggregate(steps ~ interval | wkEnd, data=dataNoNa, FUN=mean, na.rm=T)
agg_wkdays <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="Weekday"), FUN=mean, na.rm=T)
View(agg_wkdays)
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, type="l", layout=c(1,2))
xyplot(mean(dataNoNa$steps) ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, type="l", layout=c(1,2))
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, type="l", layout=c(1,2))
xyplot(agg_wkdaysa$steps ~ agg_wkdays$interval | dataNoNa$wkEnd, data=dataNoNa, type="l", layout=c(1,2))
xyplot(agg_wkdays$steps ~ agg_wkdays$interval | dataNoNa$wkEnd, data=dataNoNa, type="l", layout=c(1,2))
xyplot(agg_wkdays$steps ~ agg_wkdays$interval | dataNoNa$wkEnd, data=agg_wkdays, type="l", layout=c(1,2))
xyplot(dataNoNa$steps ~ dataNoNa$interval | dataNoNa$wkEnd, data=dataNoNa, type="l", layout=c(1,2))
View(agg_wkEnd)
agg_wkdays$wkEnd <- 0
agg_wkdays$wkEnd <- 1
agg_tot <- rbind(agg_wkdays,agg_wkEnd)
agg_wkEnd <- aggregate(steps ~ interval, data=subset(dataNoNa,wkEnd=="Weekend"), FUN=mean, na.rm=T)
agg_wkdays$wkEnd <- 1
View(agg_wkEnd)
agg_wkEnd$wkEnd <- 1
agg_tot <- rbind(agg_wkdays,agg_wkEnd)
View(agg_tot)
xyplot(steps ~ interval | wkEnd, data=agg_tot, type="l", layout=c(1,2))
View(agg_tot)
xyplot(agg_tot$steps ~ agg_tot$interval | agg_tot$wkEnd, data=agg_tot, type="l", layout=c(1,2))
xyplot(agg_tot$steps ~ agg_tot$interval | agg_tot$wkEnd, data=agg_tot, type="l", layout=c(1,2), main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab"Number of Steps")
xyplot(agg_tot$steps ~ agg_tot$interval | agg_tot$wkEnd, data=agg_tot, type="l", layout=c(1,2), main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
xyplot(agg_tot$steps ~ agg_tot$interval | wkEnd, data=agg_tot, type="l", layout=c(1,2), main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
plot1 <- xyplot(agg_wkdays$steps ~ agg_wkdays$interval, data=agg_wkdays, type="l", main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
plot2 <- xyplot(agg_wkEnd$steps ~ agg_wkEnd$interval, data=agg_wkEnd, type="l")"
plot2 <- xyplot(agg_wkEnd$steps ~ agg_wkEnd$interval, data=agg_wkEnd, type="l")
library(latticeExtra)
plot1+plot2
install.packages("latticeExtra")
library("latticeExtra", lib.loc="C:/Users/broberson/Documents/R/win-library/3.0")
library(latticeExtra)
plot1+plot2
plot1 <- xyplot(agg_wkdays$steps ~ agg_wkdays$interval, data=agg_wkdays, type="l",col="red" main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
plot1+plot2
plot1 <- xyplot(agg_wkdays$steps ~ agg_wkdays$interval, data=agg_wkdays, type="l",col="red" main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
plot2 <- xyplot(agg_wkEnd$steps ~ agg_wkEnd$interval, data=agg_wkEnd, type="l")
library(latticeExtra)
plot1+plot2
plot1 <- xyplot(agg_wkdays$steps ~ agg_wkdays$interval, data=agg_wkdays, type="l",col="red" main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
plot2 <- xyplot(agg_wkEnd$steps ~ agg_wkEnd$interval, data=agg_wkEnd, type="l")
library(latticeExtra)
plot1+plot2
agg_tot$wkEnd <- as.factor(agg_tot$wkEnd)
xyplot(agg_tot$steps ~ agg_tot$interval | wkEnd, data=agg_tot, type="l", layout=c(1,2), main="Weekend vs Weekday: Number of Steps", xlab="Interval", ylab="Number of Steps")
library(lattice)
library(RCurl)
x <- getURL("https://github.com/br949805/RepData_PeerAssessment1/raw/master/activity.csv",
ssl.verifypeer=0L, followlocation=1L)
data <- read.csv(text=x)
rm(x)
agg <- aggregate(steps ~ date, data=data, FUN=sum, na.rm=T)
hist(agg$steps, main="Distribution of Steps Per Day", xlab= "Steps Per Day")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GIT Repos/HAC Reduction Penalties")
setwd("~/GIT Repos/HAC Reduction Penalties")
library(RODBC)
library(seqinr)
library(gmodels)
#Connect to SQL Databases and read in data
con <- odbcConnect("AHA",uid="SASUser", pwd="EHI1301a")
aha <- sqlQuery(con,"select t1.ID,MNAME, MCRNUM, MAPP8, MAPP5, t2.HOSPBD  from AS12DEM t1 inner join as12svc1 t2 on t1.id = t2.id")
odbcClose(con)
rm(con)
con <- odbcConnect("MemberList",uid="SASUser", pwd="EHI1301a")
mem <- sqlQuery(con,"select * from AEH_Current_Members")
odbcClose(con)
rm(con)
con <- odbcConnect("IPPSData",uid="SASUser", pwd="EHI1301a")
cmi <- sqlQuery(con,"select PROVIDER_NUMBER, HOSPITAL, TACMIV31 from FY2014IMPACT")
odbcClose(con)
rm(con)
#Read in HAC_Data.csv; rename matching variables in data frames
names(aha) <- c("ID","MNAME","PROVIDER_NUMBER", "MAPP8", "MAPP5", "HOSPBD")
aha$bed.size <- ifelse(aha$HOSPBD >= 400,1,0)
hac <- read.csv("HAC_Data.csv")
names(hac) <- c("PROVIDER_NUMBER","PENALIZED", "SCORE")
mem <- as.data.frame(mem[,c("MCRNUM","MNAME")])
names(mem) <- c("PROVIDER_NUMBER","MNAME")
#Merge data frames
cmi_hac <- merge(hac, cmi, by="PROVIDER_NUMBER")
cmi_hac_aha <- merge(cmi_hac, aha, by="PROVIDER_NUMBER")
#Recode PENALIZED Variable
for(i in 1:nrow(cmi_hac_aha)) {
if(cmi_hac_aha$PENALIZED[i] == "Y"){
cmi_hac_aha$PENALIZED.BINARY[i] <- 1
} else if(cmi_hac_aha$PENALIZED[i] == "N"){
cmi_hac_aha$PENALIZED.BINARY[i] <- 0
} else {
cmi_hac_aha$PENALIZED.BINARY[i] <- NA
}
}
#Recode MAPP8 and MAPP5
cmi_hac_aha$MAPP8.BINARY <- ifelse(cmi_hac_aha$MAPP8 == 2,0,1)
cmi_hac_aha$MAPP5.BINARY <- ifelse(cmi_hac_aha$MAPP5 == 2,0,1)
cmi_hac_aha$Test.Set <- sample(0:1,nrow(cmi_hac_aha), replace=TRUE)
#Combine as Teaching
cmi_hac_aha$TEACHING <- ifelse(cmi_hac_aha$MAPP8.BINARY == 1,1,0)
chisq.test(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$TEACHING)
table(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$TEACHING)
chisq.test(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$bed.size)
table(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$bed.size)
cmi_hac_aha$MEMBER <- ifelse(cmi_hac_aha$PROVIDER_NUMBER %in% mem$PROVIDER_NUMBER,"MEMBER","NON-MEMBER")
chisq.test(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$MEMBER)
table(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$MEMBER)
cmi_hac_aha$bed.size.text <- ifelse(cmi_hac_aha$bed.size == 1,">= 400 Beds","< 400 Beds")
boxplot(cmi_hac_aha$SCORE ~ cmi_hac_aha$bed.size.text, main="Hospitals Size vs Total HAC Score", ylab="Scores")
abline(h=7, col="red")
text(c(0,6.05),paste("Median: ",median(cmi_hac_aha$SCORE[cmi_hac_aha$bed.size == 1],)))
text(4.85,paste("Median: ",median(cmi_hac_aha$SCORE[cmi_hac_aha$bed.size == 0],)))
rect(0,7,4,11, col=col2alpha("red", alpha = 0.2))
text(1.5,9,"Penalized", cex=1.5)
cmi_hac_aha$TEACHING <- ifelse(cmi_hac_aha$MAPP8.BINARY == 1 ,"Teaching","Other")
boxplot(cmi_hac_aha$SCORE ~ cmi_hac_aha$TEACHING,  main="Teaching Status vs Total HAC Score", ylab="Scores")
abline(h=7, col="red")
text(c(0,6.7),paste("Median: ",median(cmi_hac_aha$SCORE[cmi_hac_aha$TEACHING == "Teaching"],)))
text(4.85,paste("Median: ",median(cmi_hac_aha$SCORE[cmi_hac_aha$TEACHING ==  "Other"],)))
rect(0,7,4,11, col=col2alpha("red", alpha = 0.2))
text(1.5,9,"Penalized", cex=1.5)
boxplot(cmi_hac_aha$SCORE ~ cmi_hac_aha$MEMBER, main="Member vs Non-Member Total HAC Score", ylab="Scores")
abline(h=7, col="red")
text(c(0,5),paste("Median: ",median(cmi_hac_aha$SCORE[cmi_hac_aha$MEMBER == "NON-MEMBER"],)))
text(6.7,paste("Median: ",median(cmi_hac_aha$SCORE[cmi_hac_aha$MEMBER == "MEMBER"],)))
rect(0,7,4,11, col=col2alpha("red", alpha = 0.2))
text(1.5,9,"Penalized", cex=1.5)
for(i in 1:nrow(cmi_hac_aha)) {
if(cmi_hac_aha$TACMIV31[i] >= 1.664){
cmi_hac_aha$CMI.TIER[i] <- 4
} else if(cmi_hac_aha$TACMIV31[i] >= 1.460){
cmi_hac_aha$CMI.TIER[i] <- 3
} else if(cmi_hac_aha$TACMIV31[i] >= 1.269){
cmi_hac_aha$CMI.TIER[i] <- 2
} else {
cmi_hac_aha$CMI.TIER[i] <- 1
}
}
View(cmi_hac_aha)
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.1")
library(RCurl)#To get the result of an url
library(rjson)#To read json files
#An example of coordinates
xlat<-57.372801
xlong<-2.016214
ylat<-57.459688
ylong<-2.790558
#Writing the corresponding url
z<-paste("http://maps.google.com/maps/api/directions/json?origin=",xlat,",",xlong,"&destination=",ylat,",",ylong,"&sensor=false",sep="")
#To get and read the json file
x<-fromJSON(getURL(url=z))
#To catch the Google limitation on requests (it often happens)
if(x$status=="OVER_QUERY_LIMIT"){
while(x$status=="OVER_QUERY_LIMIT"){Sys.sleep(10*60) ;print("wait for 10 mins")}
}
x<-fromJSON(getURL(url=z))
#To get the total travel time
TRAVEL_TIME<-x[[2]][[1]][[2]][[1]][[2]]$text
print(TRAVEL_TIME)
install.packages("rjson")
library(rjson)#To read json files
#An example of coordinates
xlat<-57.372801
xlong<-2.016214
ylat<-57.459688
ylong<-2.790558
#Writing the corresponding url
z<-paste("http://maps.google.com/maps/api/directions/json?origin=",xlat,",",xlong,"&destination=",ylat,",",ylong,"&sensor=false",sep="")
#To get and read the json file
x<-fromJSON(getURL(url=z))
if(x$status=="OVER_QUERY_LIMIT"){
while(x$status=="OVER_QUERY_LIMIT"){Sys.sleep(10*60) ;print("wait for 10 mins")}
}
x<-fromJSON(getURL(url=z))
#To get the total travel time
TRAVEL_TIME<-x[[2]][[1]][[2]][[1]][[2]]$text
print(TRAVEL_TIME)
if(x$status=="OVER_QUERY_LIMIT"){
while(x$status=="OVER_QUERY_LIMIT"){Sys.sleep(10*60) ;print("wait for 10 mins")}
}
x<-fromJSON(getURL(url=z))
library(rjson)
json_file<- "http://maps.google.com/maps/nav?output=js&q=from:%20Montreal%20to:%20Toronto"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_data$Directions$Duration$html
json_data$Directions$Routes[[1]]$Distance$meters
oddsratioWald.proc <- function(n00, n01, n10, n11, alpha = 0.05){
#
#  Compute the odds ratio between two binary variables, x and y,
#  as defined by the four numbers nij:
#
#    n00 = number of cases where x = 0 and y = 0
#    n01 = number of cases where x = 0 and y = 1
#    n10 = number of cases where x = 1 and y = 0
#    n11 = number of cases where x = 1 and y = 1
#
OR <- (n00 * n11)/(n01 * n10)
#
#  Compute the Wald confidence intervals:
#
siglog <- sqrt((1/n00) + (1/n01) + (1/n10) + (1/n11))
zalph <- qnorm(1 - alpha/2)
logOR <- log(OR)
loglo <- logOR - zalph * siglog
loghi <- logOR + zalph * siglog
#
ORlo <- exp(loglo)
ORhi <- exp(loghi)
#
oframe <- data.frame(LowerCI = ORlo, OR = OR, UpperCI = ORhi, alpha = alpha)
oframe
}
TableOR.proc <- function(x,y,alpha=0.05){
#
xtab <- table(x,y)
n00 <- xtab[1,1]
n01 <- xtab[1,2]
n10 <- xtab[2,1]
n11 <- xtab[2,2]
#
outList <- vector("list",2)
outList[[1]] <- paste("Odds ratio between the level [",dimnames(xtab)[[1]][1],"] of the first variable and the level [",dimnames(xtab)[[2]][1],"] of the second variable:",sep=" ")
outList[[2]] <- oddsratioWald.proc(n00,n01,n10,n11,alpha)
outList
}
TableOR.proc(cmi_hac_aha$PENALIZED.BINARY,cmi_hac_aha$CMI.TIER[[cmi_hac_aha$CMI.TIER > 2]])
TableOR.proc(cmi_hac_aha$PENALIZED.BINARY,subset(cmi_hac_aha$CMI.TIER,cmi_hac_aha$CMI.TIER > 2))
for(i in 1:nrow(cmi_hac_aha)) {
if(cmi_hac_aha$TACMIV31[i] >= 1.664){
cmi_hac_aha$CMI.TIER.TOP[i] <- 1
}  else {
cmi_hac_aha$CMI.TIER.TOP[i] <- 0
}
}
TableOR.proc(cmi_hac_aha$PENALIZED.BINARY, cmi_hac_aha$CMI.TIER.TOP)
TableOR.proc(cmi_hac_aha$CMI.TIER.TOP,cmi_hac_aha$PENALIZED.BINARY)
table(cmi_hac_aha$CMI.TIER.TOP,cmi_hac_aha$PENALIZED.BINARY)
